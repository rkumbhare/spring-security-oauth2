<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:security="http://www.springframework.org/schema/security" xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd
		http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">


	<!-- Oauth2 token configuration -->
	<security:http use-expressions="false" pattern="/oauth/token" create-session="stateless">
		<security:anonymous enabled="false" />
		<security:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<security:http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<!-- include this only if you need to authenticate clients via request parameters -->
		<security:custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER" />
		<security:access-denied-handler ref="accessDeniedHandler" />
	</security:http>

	<bean id="oauth2AuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="restapp" />
	</bean>

	<bean id="clientAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="restapp/client" />
		<property name="typeName" value="Basic" />
	</bean>

	<bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="clientAuthenticationManager" />
	</bean>

	<security:authentication-manager id="clientAuthenticationManager">
		<security:authentication-provider user-service-ref="clientDetailsUserSerivce" />
	</security:authentication-manager>

	<bean id="clientDetailsUserSerivce" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetails" />
	</bean>

	<bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore"></bean>
	<bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="supportRefreshToken" value="true" />
		<property name="clientDetailsService" ref="clientDetails" />
	</bean>
	<bean id="approvalStore" class="org.springframework.security.oauth2.provider.approval.TokenApprovalStore">
		<property name="tokenStore" ref="tokenStore" />
	</bean>

	<bean id="userApprovalHandler"
		class="org.springframework.security.oauth2.provider.approval.ApprovalStoreUserApprovalHandler">
		<property name="approvalStore" ref="approvalStore" />
		<property name="clientDetailsService" ref="clientDetails" />
		<property name="requestFactory">
			<bean class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
				<constructor-arg name="clientDetailsService" ref="clientDetails" />
			</bean>
		</property>
	</bean>

	<!-- OAuth2 Authorization Server -->
	<oauth2:authorization-server client-details-service-ref="clientDetails"
		token-services-ref="tokenServices" user-approval-handler-ref="userApprovalHandler">
		<oauth2:authorization-code />
		<oauth2:implicit />
		<oauth2:refresh-token />
		<oauth2:client-credentials />
		<oauth2:password />
	</oauth2:authorization-server>

	<!-- OAuth2 Protected Resources Server -->
	<oauth2:resource-server id="resourceServerFilter" resource-id="restapp"
		token-services-ref="tokenServices" />


	<!-- File based client details access -->
	<oauth2:client-details-service id="clientDetails">
		<!-- Web Application clients -->
		<oauth2:client client-id="client1" 
					authorized-grant-types="password,authorization_code,refresh_token,implicit"
					authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIEN" 
					access-token-validity="60" 
					resource-ids="restapp"
					scope="read,write,trust" />
		<oauth2:client client-id="client2" 
					authorized-grant-types="password"
					authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIEN" 
					access-token-validity="60" 
					resource-ids="restapp"
					scope="read,write,trust" />
	</oauth2:client-details-service>



	<!-- The OAuth2 protected resources are separated out into their own block so we can deal with authorization 
		and error handling separately. This isn't mandatory, but it makes it easier to control the behaviour. -->
	<security:http use-expressions="true" create-session="never"
		access-decision-manager-ref="accessDecisionManager">
		<security:anonymous enabled="false" />
		<security:intercept-url pattern="/user*" access="hasAnyRole('ROLE_ADMIN')" />
		<security:http-basic entry-point-ref="oauth2AuthenticationEntryPoint" />
		<security:custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
		<security:access-denied-handler ref="accessDeniedHandler" />
	</security:http>

	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter"></bean>
				<bean class="org.springframework.security.access.vote.RoleVoter"></bean>
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter"></bean>
				<bean class="org.springframework.security.web.access.expression.WebExpressionVoter">
					<property name="expressionHandler" ref="oauthWebExpressionHandler" />
				</bean>
			</list>
		</constructor-arg>
	</bean>

	<oauth2:web-expression-handler id="oauthWebExpressionHandler" />
	<oauth2:expression-handler id="oauthExpressionHandler" />

	<bean id="accessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler"></bean>

	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider>
			<security:user-service>
				<security:user name="admin" password="password" authorities="ROLE_ADMIN" />
				<security:user name="user" password="password" authorities="ROLE_USER" />
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>

	<security:global-method-security pre-post-annotations="enabled"
		proxy-target-class="true">
		<security:expression-handler ref="oauthExpressionHandler" />
	</security:global-method-security>

</beans>
